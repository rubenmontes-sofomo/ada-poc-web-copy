import { useState, useEffect } from 'react'
import { promises as fs } from 'fs'
import path from 'path'
import { GetStaticProps } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'

import { Layout } from '@/components/Layout/Layout'
import { ToggleField } from '@/components/toggle-field/toggle-field'
import styles from '@/styles/natural-language-form.module.scss'

type NaturalLanguageFormProps = {
  intentEntries: any[]
  topicEntries: any[]
  personalizationEntries: any[]
  goalEntries: any[]
  solutions: any[]
}

export const getStaticProps: GetStaticProps = async () => {
  const solutionsPath = path.join(
    process.cwd(),
    'src/pages/natural-language-form/data/solutions.json'
  )
  const solutions = JSON.parse(await fs.readFile(solutionsPath, 'utf8'))

  const intentEntries: { uid: number; title: string }[] = [
    { uid: 1, title: 'want help with' },
    { uid: 2, title: 'want to understand all there is to know about' },
    { uid: 3, title: 'want guidance' },
  ]
  const topicEntries: { uid: number; title: string }[] = [
    { uid: 1, title: 'my crying baby so that' },
    { uid: 2, title: 'night parenting' },
    { uid: 3, title: 'for the next chaper for' },
  ]
  const personalizationEntries: { uid: number; title: string }[] = [
    { uid: 1, title: 'my 12 week old Charlie' },
    { uid: 2, title: 'so that my family' },
  ]
  const goalEntries: { uid: number; title: string }[] = [
    { uid: 1, title: 'is no longer crying' },
    { uid: 2, title: 'is rested' },
    { uid: 3, title: 'then he will be happy' },
  ]

  return {
    props: {
      intentEntries,
      topicEntries,
      personalizationEntries,
      goalEntries,
      solutions,
    },
  }
}

export default function NaturalLanguage({
  intentEntries,
  topicEntries,
  personalizationEntries,
  goalEntries,
  solutions,
}: NaturalLanguageFormProps) {
  const router = useRouter()
  const [intent, setIntent] = useState(intentEntries[0].title)
  const [topic, setTopic] = useState(topicEntries[0].title?.toLowerCase())
  const [personalization, setPersonalization] = useState(
    personalizationEntries[0].title
  )
  const [goal, setGoal] = useState(goalEntries[0].title)
  const [steps, setSteps] = useState([intent, topic, personalization, goal])

  const redirectToSolution = () => {
    const proposedSolution = solutions.filter((solution: any) =>
      steps.every(
        (step: string, index: number) => step === solution.choices[index]
      )
    )[0]

    if (proposedSolution) {
      const { url } = proposedSolution.solution
      router.push(url)
    }
  }

  useEffect(() => {
    setSteps([intent, topic, personalization, goal])
  }, [intent, topic, personalization, goal])

  return (
    <Layout options={{ showBackButton: false }}>
      <Head>
        <title>Natural Language Form</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Image
          src="/images/happy_mama.jpeg"
          width={1208}
          height={1586}
          layout="intrinsic"
          alt="Happy mama"
        />
        <div className={styles.headline}>
          <span>I</span>
          <ToggleField
            selectedValue={intent}
            items={intentEntries}
            setValue={setIntent}
          />
          <ToggleField
            selectedValue={topic}
            items={topicEntries}
            setValue={setTopic}
          />
          <ToggleField
            selectedValue={personalization}
            items={personalizationEntries}
            setValue={setPersonalization}
          />
          <ToggleField
            selectedValue={goal}
            items={goalEntries}
            setValue={setGoal}
          />
        </div>
      </div>
      <div className={styles.actions}>
        <a className={`button primary`} onClick={redirectToSolution}>
          Let&apos;s do this
        </a>
      </div>
    </Layout>
  )
}
